{"status":{},"product_version":"2.7.1.1","spec":{"description":"","resources":{"client_attrs":{"5fa1c195_deployment":{"y":-5673.1490662009,"x":-6190.4625340969}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"365a4d8f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"b27c12df_runbook","main_task_local_reference":{"kind":"app_task","name":"365a4d8f_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Delete_Project"},{"kind":"app_task","name":"Delete_VLAN"},{"kind":"app_task","name":"Delete_Env"}],"name":"f3330ffd_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Delete_Project"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Delete_VLAN"}},{"from_task_reference":{"kind":"app_task","name":"Delete_VLAN"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Delete_Env"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Delete_Project","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/projects\/@@{project_uuid}@@\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='DELETE', auth='BASIC', user=prism_user, passwd=prism_pass, headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\nelse:\n  print \"Post delete project failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Delete_VLAN","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/subnets\/@@{networkUuid}@@\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='DELETE', auth='BASIC', user=prism_user, passwd=prism_pass, headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\nelse:\n  print \"Post delete network failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Delete_Env","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/environments\/@@{envuuid}@@\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='DELETE', auth='BASIC', user=prism_user, passwd=prism_pass, headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\nelse:\n  print \"Post delete network failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"7654b754_runbook","main_task_local_reference":{"kind":"app_task","name":"f3330ffd_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"a4db40ae_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"d832e492_runbook","main_task_local_reference":{"kind":"app_task","name":"a4db40ae_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"18062e1f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"fd2b48ef_runbook","main_task_local_reference":{"kind":"app_task","name":"18062e1f_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"f041b614_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"109c3a50_runbook","main_task_local_reference":{"kind":"app_task","name":"f041b614_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"Prism_Central_API","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"project_uuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"networkUuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"envuuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"nameuuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Directoryuuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"type","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"dn","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"userorgroupuuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[],"type":"EXISTING_VM","name":"PC","readiness_probe":{"connection_type":"SSH","retries":"5","disable_readiness_probe":true,"address":"@@{ip_address}@@","delay_secs":"60","connection_port":22,"login_credential_local_reference":{"kind":"app_credential","name":"Prism_Central"}},"os_type":"Linux","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{PC_IP}@@"},"variable_list":[]}],"credential_definition_list":[{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Prism_Central"},{"username":"root","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"local"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Prism_Central_API"}],"name":"Create_VPC","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Create_VPC"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Create_Project"},{"kind":"app_task","name":"Create_VLAN"},{"kind":"app_task","name":"Assign_VLAN"},{"kind":"app_task","name":"Create_Env"},{"kind":"app_task","name":"Asign_Env"},{"kind":"app_task","name":"Assign_Quota"},{"kind":"app_task","name":"Assign_Items_To_Project"},{"kind":"app_task","name":"Get_Active_Directory_uuid"},{"kind":"app_task","name":"Retrieve User or Group DN"},{"kind":"app_task","name":"Retrieve User or Group UUID"},{"kind":"app_task","name":"Add User or Group"}],"name":"a7dea74b_dag","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Create_Project"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create_VLAN"}},{"from_task_reference":{"kind":"app_task","name":"Create_VLAN"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Assign_VLAN"}},{"from_task_reference":{"kind":"app_task","name":"Assign_VLAN"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create_Env"}},{"from_task_reference":{"kind":"app_task","name":"Create_Env"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Asign_Env"}},{"from_task_reference":{"kind":"app_task","name":"Asign_Env"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Assign_Quota"}},{"from_task_reference":{"kind":"app_task","name":"Assign_Quota"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Assign_Items_To_Project"}},{"from_task_reference":{"kind":"app_task","name":"Assign_Items_To_Project"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Get_Active_Directory_uuid"}},{"from_task_reference":{"kind":"app_task","name":"Get_Active_Directory_uuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Retrieve User or Group DN"}},{"from_task_reference":{"kind":"app_task","name":"Retrieve User or Group DN"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Retrieve User or Group UUID"}},{"from_task_reference":{"kind":"app_task","name":"Retrieve User or Group UUID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Add User or Group"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Create_Project","state":"ACTIVE","attrs":{"exit_status":[],"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/projects_internal\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\n  \"metadata\": {\n    \"kind\": \"project\",\n  },\n  \"api_version\": \"3.0\",\n  \"spec\": {\n    \"project_detail\": {\n      \"name\": \"@@{Project_Name}@@\",\n      \"resources\": {}\n    },\n    \"user_list\": [],\n    \"user_group_list\": [],\n    \"access_control_policy_list\": []\n  }\n}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\n  print \"project_uuid={0}\".format(json.loads(resp.content)['metadata']['uuid'])\nelse:\n  print \"Post create project failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["project_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Create_VLAN","state":"ACTIVE","attrs":{"exit_status":[],"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v0.8\/networks?proxyClusterUuid=00058ef8-c31c-f0bc-0000-000000007b23\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\n  \"name\": \"VLAN@@{VLANID}@@\",\n  \"vlanId\": \"@@{VLANID}@@\",\n  \"ipConfig\": {\n    \"dhcpOptions\": {\n      \"domainNameServers\": \"@@{DNSIP}@@\",\n      \"domainSearch\": \"@@{domainSearch}@@\",\n      \"domainName\": \"@@{domainName}@@\"\n    },\n    \"networkAddress\": \"10.10.@@{VLANID}@@.0\",\n    \"prefixLength\": \"24\",\n    \"defaultGateway\": \"10.10.@@{VLANID}@@.254\",\n    \"pool\": [\n      {\n        \"range\": \"10.10.@@{VLANID}@@.10 10.10.@@{VLANID}@@.200\"\n      }\n    ]\n  }\n}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\n  print \"networkUuid={0}\".format(json.loads(resp.content)['networkUuid'])\n\nelse:\n  print \"Post create vlan failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["networkUuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Assign_VLAN","state":"ACTIVE","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/projects_internal\/@@{project_uuid}@@\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\n  \"api_version\": \"3.1\",\n  \"metadata\": {\n    \"kind\": \"project\",\n    \"owner_reference\": {\n      \"kind\": \"user\",\n      \"uuid\": \"00000000-0000-0000-0000-000000000000\",\n      \"name\": \"admin\"\n    },\n    \"use_categories_mapping\": False,\n    \"spec_version\": 0,\n    \"uuid\": \"@@{project_uuid}@@\",\n    \"project_reference\": {\n      \"kind\": \"project\",\n      \"name\": \"@@{Project_Name}@@\",\n      \"uuid\": \"@@{project_uuid}@@\"\n    },\n    \"categories_mapping\": {},\n    \"categories\": {}\n  },\n  \"spec\": {\n    \"project_detail\": {\n      \"name\": \"@@{Project_Name}@@\",\n      \"resources\": {\n        \"account_reference_list\": [],\n        \"subnet_reference_list\": [\n          {\n            \"kind\": \"subnet\",\n            \"name\": \"VLAN@@{VLANID}@@\",\n            \"uuid\": \"@@{networkUuid}@@\"\n          }\n        ],\n        \"resource_domain\": {\n          \"resources\": []\n        },\n        \"environment_reference_list\": [],\n        \"user_reference_list\": [],\n        \"external_user_group_reference_list\": []\n      }\n    },\n    \"access_control_policy_list\": [],\n    \"user_list\": [],\n    \"user_group_list\": []\n  }\n}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='PUT', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\nelse:\n  print \"PUT add vlan to project failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Create_Env","state":"ACTIVE","attrs":{"exit_status":[],"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/images\/list\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\"filter\":\"name==@@{Image_Name}@@\"}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\n  imageuuid = json.loads(resp.content)['entities'][0]['metadata']['uuid']\n\nelse:\n  print \"Get image uuid failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n  \nprint imageuuid\n\nurl     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/environments\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\nenvuuid = str(uuid.uuid4())\nnameuuid = str(uuid.uuid4())\nmy_var=\"@{calm_unique}@\"\nmy_var1=\"@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@\"\n\n\nprint \"Environment uuid \"+ envuuid\nprint \"Name uuid \" +nameuuid\n\npayload = {\n  \"spec\": {\n    \"name\": nameuuid,\n    \"resources\": {\n      \"substrate_definition_list\": [\n        {\n          \"uuid\": str(uuid.uuid4()),\n          \"action_list\": [],\n          \"readiness_probe\": {\n            \"connection_type\": \"SSH\",\n            \"address\": \"@\" + my_var1 + \"@\",\n\t\t\t\"disable_readiness_probe\": True,\n            \"connection_port\": 22,\n            \"retries\": \"5\",\n            \"login_credential_local_reference\": {\n              \"kind\": \"app_credential\",\n              \"uuid\": nameuuid\n            }\n          },\n          \"editables\": {\n            \"create_spec\": {\n              \"resources\": {\n                \"nic_list\": {},\n                \"serial_port_list\": {}\n              }\n            }\n          },\n          \"os_type\": \"Linux\",\n          \"type\": \"AHV_VM\",\n          \"create_spec\": {\n            \"resources\": {\n              \"nic_list\": [\n                {\n                  \"subnet_reference\": {\n                    \"uuid\": \"@@{networkUuid}@@\"\n                  },\n                  \"ip_endpoint_list\": []\n                }\n              ],\n              \"num_vcpus_per_socket\": 1,\n              \"num_sockets\": 2,\n              \"memory_size_mib\": 4096,\n              \"boot_config\": {\n                \"boot_device\": {\n                  \"disk_address\": {\n                    \"device_index\": 0,\n                    \"adapter_type\": \"SCSI\"\n                  }\n                }\n              },\n              \"disk_list\": [\n                {\n                  \"data_source_reference\": {\n                    \"kind\": \"image\",\n                    \"name\": \"@@{Image_Name}@@\",\n                    \"uuid\": imageuuid\n                  },\n                  \"device_properties\": {\n                    \"disk_address\": {\n                      \"device_index\": 0,\n                      \"adapter_type\": \"SCSI\"\n                    },\n                    \"device_type\": \"DISK\"\n                  }\n                }\n              ]\n            },\n            \"name\": \"vm-@\" + my_var + \"@\",\n            \"categories\": {}\n          },\n          \"variable_list\": [],\n          \"name\": \"Untitled\"\n        }\n      ],\n      \"credential_definition_list\": [\n        {\n          \"name\": \"root\",\n          \"type\": \"PASSWORD\",\n          \"username\": \"@@{local.username}@@\",\n          \"secret\": {\n            \"attrs\": {\n              \"is_secret_modified\": \"true\"\n            },\n            \"value\": \"@@{local.secret}@@\"\n          },\n          \"uuid\": nameuuid\n        }\n      ]\n    }\n  },\n  \"api_version\": \"3.0\",\n  \"metadata\": {\n    \"kind\": \"environment\",\n    \"uuid\": envuuid\n  }\n}\n\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\n\nresp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\n  print \"envuuid={0}\".format(json.loads(resp.content)['metadata']['uuid'])\n  print \"nameuuid={0}\".format(json.loads(resp.content)['metadata']['name'])\nelse:\n  print \"Post create environment failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["nameuuid","envuuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Asign_Env","state":"ACTIVE","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/projects_internal\/@@{project_uuid}@@\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\n  \"spec\": {\n    \"access_control_policy_list\": [\n      \n    ],\n    \"project_detail\": {\n      \"name\": \"@@{Project_Name}@@\",\n      \"resources\": {\n        \"account_reference_list\": [\n          \n        ],\n        \"environment_reference_list\": [\n          {\n            \"kind\": \"environment\",\n            \"uuid\": \"@@{envuuid}@@\"\n          }\n        ],\n        \"user_reference_list\": [\n          \n        ],\n        \"external_user_group_reference_list\": [\n          \n        ],\n        \"subnet_reference_list\": [\n          {\n            \"kind\": \"subnet\",\n            \"name\": \"VLAN@@{VLANID}@@\",\n            \"uuid\": \"@@{networkUuid}@@\"\n          }\n        ]\n      }\n    },\n    \"user_list\": [\n      \n    ],\n    \"user_group_list\": [\n      \n    ]\n  },\n  \"api_version\": \"3.1\",\n  \"metadata\": {\n    \"project_reference\": {\n      \"kind\": \"project\",\n      \"name\": \"\",\n      \"uuid\": \"@@{project_uuid}@@\"\n    },\n    \"kind\": \"project\",\n    \"spec_version\": 1,\n    \"categories_mapping\": {\n      \n    },\n    \"owner_reference\": {\n      \"kind\": \"user\",\n      \"name\": \"admin\",\n      \"uuid\": \"00000000-0000-0000-0000-000000000000\"\n    }\n  }\n}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='PUT', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\nelse:\n  print \"PUT add env to project failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Assign_Quota","state":"ACTIVE","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/projects_internal\/@@{project_uuid}@@\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\nvcpu = @@{vCPU_Quota}@@\nmemory = @@{Memory_Quota}@@*1073741824\nstorage = @@{Storage_Quota}@@*1073741824\n\npayload = {\n  \"api_version\": \"3.1\",\n  \"metadata\": {\n    \"kind\": \"project\",\n    \"owner_reference\": {\n      \"kind\": \"user\",\n      \"uuid\": \"00000000-0000-0000-0000-000000000000\",\n      \"name\": \"admin\"\n    },\n    \"use_categories_mapping\": False,\n    \"spec_version\": 2,\n    \"uuid\": \"@@{project_uuid}@@\",\n    \"project_reference\": {\n      \"kind\": \"project\",\n      \"name\": \"@@{Project_Name}@@\",\n      \"uuid\": \"@@{project_uuid}@@\"\n    },\n    \"categories_mapping\": {},\n    \"categories\": {}\n  },\n  \"spec\": {\n    \"project_detail\": {\n      \"name\": \"@@{Project_Name}@@\",\n      \"resources\": {\n        \"account_reference_list\": [],\n        \"subnet_reference_list\": [\n          {\n            \"kind\": \"subnet\",\n            \"name\": \"VLAN@@{VLANID}@@\",\n            \"uuid\": \"@@{networkUuid}@@\"\n          }\n        ],\n        \"resource_domain\": {\n          \"resources\": [\n            {\n              \"limit\": vcpu,\n              \"resource_type\": \"VCPUS\"\n            },\n            {\n              \"limit\": memory,\n              \"resource_type\": \"MEMORY\"\n            },\n            {\n              \"limit\": storage,\n              \"resource_type\": \"STORAGE\"\n            }\n          ]\n        },\n        \"environment_reference_list\": [],\n        \"user_reference_list\": [],\n        \"external_user_group_reference_list\": []\n      }\n    },\n    \"access_control_policy_list\": [],\n    \"user_list\": [],\n    \"user_group_list\": []\n  }\n}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='PUT', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\nelse:\n  print \"PUT add vlan to project failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Assign_Items_To_Project","state":"ACTIVE","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/marketplace_items\/list\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\"filter\":\"app_state==PUBLISHED\",\"length\":1000}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nmyresp = json.loads(resp.content)\n\nif resp.ok:\n  for i in myresp['entities']:\n    print i['metadata']['uuid']\n    mp_uuid = i['metadata']['uuid']\n    urlitem=\"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/calm_marketplace_items\/\"+str(mp_uuid)\n    respitem = urlreq(urlitem, verb='GET', auth='BASIC', user=prism_user, passwd=prism_pass, headers=headers)\n    print respitem.status_code\n    payloaditem = json.loads(respitem.content)\n    payloaditem['metadata'].pop('owner_reference', None)\n    payloaditem.pop('status', None)\n    payloaditem['metadata'].pop('create_time', None)\n    app_project =  {\n        \"kind\": \"project\",\n        \"name\": \"@@{Project_Name}@@\",\n        \"uuid\": \"@@{project_uuid}@@\"\n        }\n    payloaditem['spec']['resources']['project_reference_list'].append(app_project)\n    print payloaditem['spec']['resources']['project_reference_list']\n    respitemput = urlreq(urlitem, verb='PUT', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payloaditem), headers=headers)\n    print json.dumps(json.loads(respitemput.content), indent=4)\n    if respitemput.ok:\n      print \"App with uuid : \"+mp_uuid+\" is published\"\n    else:\n      print \"Can't publish APP with uuid :\"+mp_uuid\n      exit(1)\nelse:\n  print \"Get MP Items list failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Get_Active_Directory_uuid","state":"ACTIVE","attrs":{"exit_status":[],"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/\/api\/nutanix\/v3\/directory_services\/list\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\"length\":1000,\"offset\":0}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nif resp.ok:\n  print json.dumps(json.loads(resp.content), indent=4)\n  print \"Directoryuuid={0}\".format(json.loads(resp.content)['entities'][0]['metadata']['uuid'])\nelse:\n  print \"Active directory not found\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["Directoryuuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Retrieve User or Group DN","state":"ACTIVE","attrs":{"exit_status":[],"script":"userorgroup = \"@@{UsernameorGroup}@@\"\nprint \"Input provided : \"+userorgroup\n\nif \"str(userorgroup)\" != \"\":\n  url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/directory_services\/@@{Directoryuuid}@@\/search\"\n  headers = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n  payload = {\n    \"query\": \"@@{UsernameorGroup}@@\",\n    \"returned_attribute_list\": [\n      \"memberOf\",\n      \"member\",\n      \"userPrincipalName\",\n      \"distinguishedName\"\n    ],\n    \"searched_attribute_list\": [\n      \"name\",\n      \"userPrincipalName\",\n      \"distinguishedName\"\n    ]\n  }\n\n  prism_user = '@@{Prism_Central.username}@@'\n  prism_pass = '@@{Prism_Central.secret}@@'\n\n  resp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\n  if resp.ok:\n    print json.dumps(json.loads(resp.content), indent=4)\n    print \"type={0}\".format(json.loads(resp.content)['search_result_list'][0]['type'])\n    print \"dn={0}\".format(json.loads(resp.content)['search_result_list'][0]['attribute_list'][0]['value_list'][0])\n  else:\n    print \"User or group not found\", json.dumps(json.loads(resp.content), indent=4)\n    exit(1)\n\nelse:\n  print \"No user or group provided\"\n  exit (0)","eval_variables":["type","dn"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Retrieve User or Group UUID","state":"ACTIVE","attrs":{"exit_status":[],"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/groups\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n\nif \"@@{type}@@\" == \"Group\":\n    dn = '@@{dn}@@'\n    dn = dn.lower()\n    dn = dn.replace(\" \", \"%20\")\n    dn = dn.replace(\"=\", \"%3D\")\n    dn = dn.replace(\",\", \"%2C\")\n\n\n\n    payload = {\n    \"entity_type\": \"user_group\",\n    \"group_member_attributes\": [\n        {\n        \"attribute\": \"uuid\"\n        },\n        {\n        \"attribute\": \"distinguished_name\"\n        }\n    ],\n    \"query_name\": \"prism:BaseGroupModel\",\n    \"filter_criteria\": \"distinguished_name==\" + dn\n    }\n\n\n    prism_user = '@@{Prism_Central.username}@@'\n    prism_pass = '@@{Prism_Central.secret}@@'\n    \n    print \"Group will be search : \" +dn.lower()\n    resp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\n    if resp.ok:\n        print json.dumps(json.loads(resp.content), indent=4)\n        respgroup = json.loads(resp.content)\n        if not respgroup['filtered_group_count'] == 0:\n            print \"userorgroupuuid={0}\".format(json.loads(resp.content)['group_results'][0]['entity_results'][0]['entity_id'])\n        else:\n            urlcreategroup = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/idempotence_identifiers\"\n            payloadcreategroup = {\n                \"count\": 1,\n                \"client_identifier\": str(uuid.uuid4())\n            }\n            respcreategroup = urlreq(urlcreategroup, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payloadcreategroup), headers=headers)\n            if respcreategroup.ok:\n                print \"Group uuid will be created\"\n                print json.dumps(json.loads(respcreategroup.content), indent=4)\n                print \"userorgroupuuid={0}\".format(json.loads(respcreategroup.content)['uuid_list'][0])\n            else:\n                print \"Group uuid creation failed\", json.dumps(json.loads(resp.content), indent=4)\n                exit(1)\n    else:\n        print \"Group not found\", json.dumps(json.loads(resp.content), indent=4)\n        exit(1)\nelse:\n    url = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/idempotence_identifiers\/salted\"\n    payload = {\"name_list\":[\"@@{UsernameorGroup}@@\"]}\n    \n    prism_user = '@@{Prism_Central.username}@@'\n    prism_pass = '@@{Prism_Central.secret}@@'\n    \n    resp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\n    if resp.ok:\n        print json.dumps(json.loads(resp.content), indent=4)\n        print \"userorgroupuuid={0}\".format(json.loads(resp.content)['name_uuid_list'][0]['@@{UsernameorGroup}@@'])\n    else:\n        print \"Group not found\", json.dumps(json.loads(resp.content), indent=4)\n        exit(1)\n    ","eval_variables":["userorgroupuuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Add User or Group","state":"ACTIVE","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/projects_internal\/@@{project_uuid}@@\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='GET', auth='BASIC', user=prism_user, passwd=prism_pass, headers=headers)\n\nrespcontent = json.loads(resp.content)\n\n\nurlcluster = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/clusters\/list\"\npayload = {\"kind\":\"cluster\",\"length\":500,\"offset\":0}\nresp = urlreq(urlcluster, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\nclusterlist = json.loads(resp.content)\n\nfor i in clusterlist['entities']:\n    print i['spec']['name']\n    if i['spec']['name'] == \"@@{clustername}@@\":\n        print \"Cluster found with uuid : \"+i['metadata']['uuid']\n        clusteruuid = i['metadata']['uuid']\n    else:\n        print \"Cluster not found\"\n\nif \"@@{type}@@\" == \"Group\":\n    if len(str(respcontent['spec']['access_control_policy_list'])) > 2:\n        print \"ACP is not null\"\n        exit (1)\n    else:\n        print \"ACP is null\"\n        respcontent['metadata'].pop('owner_reference', None)\n        respcontent.pop('status', None)\n        respcontent['metadata'].pop('create_time', None)\n        add_acp = {\n                    \"operation\": \"ADD\",\n                    \"acp\": {\n                        \"name\": \"nuCalmAcp-\"+str(uuid.uuid4()),\n                        \"resources\": {\n                            \"role_reference\": {\n                                \"kind\": \"role\",\n                                \"name\": \"Consumer\",\n                                \"uuid\": \"842b03be-ea09-4fe2-a025-54a73b4ad7a5\"\n                            },\n                            \"user_reference_list\": [],\n                            \"filter_list\": {\n                                \"context_list\": [\n                                    {\n                                        \"entity_filter_expression_list\": [\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"ALL\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"ALL\"\n                                                }\n                                            }\n                                        ],\n                                        \"scope_filter_expression_list\": [\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": \"PROJECT\",\n                                                \"right_hand_side\": {\n                                                    \"uuid_list\": [\n                                                        \"@@{project_uuid}@@\"\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"entity_filter_expression_list\": [\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"image\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"ALL\"\n                                                }\n                                            },\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"marketplace_item\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"SELF_OWNED\"\n                                                }\n                                            },\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"app_icon\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"ALL\"\n                                                }\n                                            },\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"category\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"ALL\"\n                                                }\n                                            },\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"cluster\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"uuid_list\": [\n                                                        clusteruuid\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"user_group_reference_list\": [\n                            {\n                                \"kind\": \"user_group\",\n                                \"name\": \"@@{dn}@@\",\n                                \"uuid\": \"@@{userorgroupuuid}@@\"\n                            }\n                            ]\n                        },\n                        \"description\": \"ACPDescription-\"+str(uuid.uuid4())\n                    },\n                    \"metadata\": {\n                        \"kind\": \"access_control_policy\"\n                    }\n                }\n        respcontent['spec']['access_control_policy_list'].append(add_acp)\n        add_group = {\n            \"kind\": \"user_group\",\n            \"name\": \"@@{dn}@@\",\n            \"uuid\": \"@@{userorgroupuuid}@@\"\n        }\n        respcontent['spec']['project_detail']['resources']['external_user_group_reference_list'].append(add_group)\n        spec_addgroup = {\n                \"metadata\": {\n                    \"kind\": \"user_group\",\n                    \"uuid\": \"@@{userorgroupuuid}@@\"\n                },\n                \"user_group\": {\n                    \"resources\": {\n                        \"directory_service_user_group\": {\n                            \"distinguished_name\": \"@@{dn}@@\"\n                        }\n                    }\n                },\n                \"operation\": \"ADD\"\n        }\n        respcontent['spec']['user_group_list'].append(spec_addgroup)\n        print respcontent\n        resp = urlreq(url, verb='PUT', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(respcontent), headers=headers)\n\n        if resp.ok:\n            print json.dumps(json.loads(resp.content), indent=4)\n        else:\n            print \"PUT add group project failed\", json.dumps(json.loads(resp.content), indent=4)\n            exit(1)\n\nelse:\n    if len(str(respcontent['spec']['access_control_policy_list'])) > 2:\n        print \"ACP is not null\"\n        exit (1)\n    else:\n        print \"ACP is null\"\n        respcontent['metadata'].pop('owner_reference', None)\n        respcontent.pop('status', None)\n        respcontent['metadata'].pop('create_time', None)\n        add_acp = {\n                    \"operation\": \"ADD\",\n                    \"acp\": {\n                        \"name\": \"nuCalmAcp-\"+str(uuid.uuid4()),\n                        \"resources\": {\n                            \"role_reference\": {\n                                \"kind\": \"role\",\n                                \"name\": \"Consumer\",\n                                \"uuid\": \"842b03be-ea09-4fe2-a025-54a73b4ad7a5\"\n                            },\n                            \"user_reference_list\": [\n                                {\n                                    \"kind\": \"user\",\n                                    \"name\": \"@@{UsernameorGroup}@@\",\n                                    \"uuid\": \"@@{userorgroupuuid}@@\"\n                                }\n                            ],\n                            \"filter_list\": {\n                                \"context_list\": [\n                                    {\n                                        \"entity_filter_expression_list\": [\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"ALL\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"ALL\"\n                                                }\n                                            }\n                                        ],\n                                        \"scope_filter_expression_list\": [\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": \"PROJECT\",\n                                                \"right_hand_side\": {\n                                                    \"uuid_list\": [\n                                                        \"@@{project_uuid}@@\"\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        \"entity_filter_expression_list\": [\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"image\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"ALL\"\n                                                }\n                                            },\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"marketplace_item\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"SELF_OWNED\"\n                                                }\n                                            },\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"app_icon\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"ALL\"\n                                                }\n                                            },\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"category\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"collection\": \"ALL\"\n                                                }\n                                            },\n                                            {\n                                                \"operator\": \"IN\",\n                                                \"left_hand_side\": {\n                                                    \"entity_type\": \"cluster\"\n                                                },\n                                                \"right_hand_side\": {\n                                                    \"uuid_list\": [\n                                                        clusteruuid\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"user_group_reference_list\": []\n                        },\n                        \"description\": \"ACPDescription-\"+str(uuid.uuid4())\n                    },\n                    \"metadata\": {\n                        \"kind\": \"access_control_policy\"\n                    }\n                }\n        respcontent['spec']['access_control_policy_list'].append(add_acp)\n        add_user = {\n            \"kind\": \"user\",\n            \"name\": \"@@{UsernameorGroup}@@\",\n            \"uuid\": \"@@{userorgroupuuid}@@\"\n        }\n        respcontent['spec']['project_detail']['resources']['user_reference_list'].append(add_user)\n        spec_adduser = {\n                \"metadata\": {\n                    \"kind\": \"user\",\n                    \"uuid\": \"@@{userorgroupuuid}@@\"\n                },\n                \"user\": {\n                    \"resources\": {\n                        \"directory_service_user\": {\n                            \"directory_service_reference\": {\n                                \"kind\": \"directory_service\",\n                                \"uuid\": \"@@{Directoryuuid}@@\"\n                            },\n                            \"user_principal_name\": \"@@{UsernameorGroup}@@\"\n                        }\n                    }\n                },\n                \"operation\": \"ADD\"\n            }\n        respcontent['spec']['user_list'].append(spec_adduser)\n        print respcontent\n        resp = urlreq(url, verb='PUT', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(respcontent), headers=headers)\n\n        if resp.ok:\n            print json.dumps(json.loads(resp.content), indent=4)\n        else:\n            print \"PUT add user project failed\", json.dumps(json.loads(resp.content), indent=4)\n            exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"ea78ec0e_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"a7dea74b_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Create_VPC"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"421fcbb9_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"9e6ff3d2_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"421fcbb9_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"depends_on_list":[],"name":"5fa1c195_deployment","published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Create_VPC"}],"substrate_local_reference":{"kind":"app_substrate","name":"PC"},"min_replicas":"1","variable_list":[],"description":""}],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Refresh MarketPlace"}],"name":"c08f210f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Prism_Central_API"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Refresh MarketPlace","attrs":{"script":"url     = \"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/marketplace_items\/list\"\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\npayload = {\"filter\":\"app_state==PUBLISHED\"}\n\nprism_user = '@@{Prism_Central.username}@@'\nprism_pass = '@@{Prism_Central.secret}@@'\n\nresp = urlreq(url, verb='POST', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payload), headers=headers)\n\nmyresp = json.loads(resp.content)\n\nif resp.ok:\n  for i in myresp['entities']:\n    print i['metadata']['uuid']\n    mp_uuid = i['metadata']['uuid']\n    urlitem=\"https:\/\/@@{PC_IP}@@:9440\/api\/nutanix\/v3\/calm_marketplace_items\/\"+str(mp_uuid)\n    respitem = urlreq(urlitem, verb='GET', auth='BASIC', user=prism_user, passwd=prism_pass, headers=headers)\n    print respitem.status_code\n    payloaditem = json.loads(respitem.content)\n    payloaditem['metadata'].pop('owner_reference', None)\n    payloaditem.pop('status', None)\n    payloaditem['metadata'].pop('create_time', None)\n    app_project =  {\n        \"kind\": \"project\",\n        \"name\": \"@@{Project_Name}@@\",\n        \"uuid\": \"@@{project_uuid}@@\"\n        }\n    payloaditem['spec']['resources']['project_reference_list'].append(app_project)\n    print payloaditem['spec']['resources']['project_reference_list']\n    respitemput = urlreq(urlitem, verb='PUT', auth='BASIC', user=prism_user, passwd=prism_pass, params=json.dumps(payloaditem), headers=headers)\n    print json.dumps(json.loads(respitemput.content), indent=4)\n    if respitemput.ok:\n      print \"App with uuid : \"+mp_uuid+\" is published\"\n    else:\n      print \"Can't publish APP with uuid :\"+mp_uuid\n      exit(1)\nelse:\n  print \"Get MP Items list failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d84703e3_runbook","main_task_local_reference":{"kind":"app_task","name":"c08f210f_dag"},"variable_list":[]},"name":"Refresh MarketPlace"}],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.10.20.7","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"Project_Name","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"VLANID","value":"0","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"DNSIP","value":"10.10.10.50","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"domainSearch","value":"ntnx.local","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"domainName","value":"ntnx","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":false,"description":"For username type UPN example : consumer@ntnx.local\nFor group type name of the group","data_type":"BASE","type":"LOCAL","name":"UsernameorGroup","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Image_Name","value":"Centos_Template","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"clustername","value":"ntnx-belux-dr","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"vCPU_Quota","value":"50","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Memory_Quota","value":"250","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Storage_Quota","value":"1000","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"Prism_Central"},"type":"USER"},"name":"VPC_Final"},"api_version":"3.0","metadata":{"last_update_time":"1567581553572696","kind":"blueprint","spec_version":132,"creation_time":"1565616512472946","name":"VPC_Final"}}